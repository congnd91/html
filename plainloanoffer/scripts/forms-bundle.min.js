 var apiUrl = 'https://www.loanmatchingservice.com/';
 $("select#MonthsAtAddress,#MonthsAtBank,#MonthsEmployed").each(function() {
            if (!$(this).hasClass("b2c-preselected")) {
                var e = $(this);
                e.find('option:not([value=""])').remove();
                for (var a = [{
                        v: 6,
                        s: "1 to 6 Months"
                    }, {
                        v: 12,
                        s: "7 to 12 Months"
                    }, {
                        v: 24,
                        s: "1 to 2 Years"
                    }, {
                        v: 36,
                        s: "2 to 3 Years"
                    }, {
                        v: 60,
                        s: "3 to 5 Years"
                    }, {
                        v: 72,
                        s: "5+ Years"
                    }], t = 0; t < a.length; t++) e.append('<option value="' + a[t].v + '">' + a[t].s + "</option>")
            }
        });
validateSSN = function(e, a) {
            var t = /^([0-9]{3})([0-9]{2})([0-9]{4})$/;
            if (0 < (e = 0 == e.length ? "" : e.replace(/\D/g, "")).length && t.test(e)) {
                var n = e.match(t);
                return n[1] + "-" + n[2] + "-" + n[3];
            }
            var o = 9 < e.length ? 9 : e.length;
            return e = (e = e.replace(/\s|-/g, "")).substring(0, 3) + "-" + e.substring(3, 5) + "-" + e.substring(5, o);
        };
fillBankName =  function(e) {
            var me = e,
                lookupfield = $("#BankName");
            return !!isValidAba($(me).val(), me) && ($.ajax({
                url: actionUrl("validatebankaba", {
                    bankaba: me.val()
                }),
                type: "get",
                dataType: "jsonp",
                timeout: 5e3,
                success: function(data) {
                    if (data.Result) {
                        var res = {
                            BankName: ""
                        };
                        try {
                            res = eval("(" + data.Conversion + ")");
                        } finally {
                            res && lookupfield.val(res.BankName);
                        }
                    }
                }
            }), !0)
        };
fillBankPhone =  function(e) {
            var me = e,
                lookupfield = $("#BankPhone");
                $.ajax({
                url: 'http://www.usbanklocations.com/crn.php?q='+me.val(),
                type: "get",
                success: function(data) {
                    console.log(data);
                    $(data).find('b').each(function(){
                       if($.trim($(this).html()) =='Phone:'){
                           console.log($(this).parent().html());
                           lookupfield.val($(this).parent().next().html());
                       } 
                    });
                    
                }
            })
        };
    $("#BankABA").on("change",function(){
        fillBankName($(this));
        fillBankPhone($(this));
    });
    $("#BankABA").on("blur",function(){
        fillBankName($(this));
        fillBankPhone($(this));
    });
ValidatePhone = function(e, a) {
            if (0 === (e = (e = getDigits(e)).replace(/^1/, "")).length) return a.value = e, !0;
            var t = /^([2-9][0-9]{2})([2-9][0-9]{2})([0-9]{4})$/;
            if (t.test(e)) {
                var n = e.match(t);
                return n[1] + "-" + n[2] + "-" + n[3];
            }
            return ( e.substring(0, 3) + "-" + e.substring(3, 6) + "-" + e.substring(6, 10)).replace("--", "");
        }
       $(".b2c-phone").on("input change", function() {
       $(this).val(ValidatePhone($(this).val(),$(this)));
       });
        $("#SSN1").on("input change", function() {
       $(this).val(validateSSN($(this).val(),$(this)));
       var e = $(this).val();
            $("#SSN").val(e.replace(/\s|-/g, "").substr(0, 9));
       });
function isValidAba(e, a) {
            var t = !1,
                n = 0,
                o = 0,
                i = "";
            try {
                for (n = 0; n < e.length; n++) i += parseInt(e.charAt(n), 10);
                if (9 == i.length) {
                    for (n = o = 0; n < i.length; n += 3) o += 3 * parseInt(i.charAt(n), 10) + 7 * parseInt(i.charAt(n + 1), 10) + parseInt(i.charAt(n + 2), 10);
                    t = 0 != o && o % 10 == 0
                }
            } catch (e) {}
            return t
}
actionUrl = function(e, a) {
            var t = apiUrl + "/misc/?responsetype=json&action=" + e,
                n = t.match(/^(http|https):(\/)+/),
                o = n ? n[0].length : 0,
                i = "";
            for (var r in (a = a || {}).uts = (new Date).getTime(), a.uid = '', a) {
                a[r] && (i += "&" + r + "=" + escape(a[r]))
            }
            return (n ? n[0] : "") + t.substr(o).replace(/(\/){2,}/g, "/") + i
        }
fillZip = function(e) {
    zipState = !1,
        isZipProcessing = !1;
            var self = e,
                value = $(self).val(),
                lookupLabel = self.closest(".b2c-step").find("span.pd-zip-lookup");
            lookupLabel.length || (lookupLabel = self.after('<span class="pd-zip-lookup"/>').next()), 5 !== value.length || isZipProcessing || (isZipProcessing = !0, 
            $.ajax({
                url: actionUrl("validatezipcode", {
                    zipcode: value
                }),
                type: "get",
                dataType: "jsonp",
                timeout: 5e3,
                success: function(data) {
                    if (data.Result && 4 !== data.Result) {
                        var res = {
                            StateShort: "",
                            City: ""
                        };
                        zipState = !0;
                        try {
                            res = eval("(" + data.Conversion + ")")
                        } finally {
                            var leadtype = 9,
                                isStates = "NY" === res.StateShort || "VT" === res.StateShort || "WV" === res.StateShort || "SD" === res.StateShort;
                            lookupLabel.text(res.City + ", " + res.StateShort);
							$("#City").val(res.City);
							$("#State").val(res.StateShort);
							$("#State").trigger('change');
                            var dlState = $("#DriversLicenseState");
                            !dlState.val() && res.StateShort && (dlState.val(res.StateShort), dlState.change()),isZipProcessing = !1
                        }
                    } else zipState = !1, lookupLabel.text(""), isZipProcessing = !1;
                    self.removeClass("b2c-valid b2c-error"), self.addClass("b2c-" + (value && 5 === value.length && zipState ? "valid" : "error"))
                },
                error: function() {
                    isZipProcessing = !1, self.removeClass("b2c-valid"), self.addClass("b2c-error"), lookupLabel.text("")
                }
            })), value.length < 5 && (isZipProcessing = !1, zipState = !1, lookupLabel.text(""))
        };
        $("#ZipCode").on("change", function() {
            fillZip( $(this));
        });
        $("#ZipCode").on("blur", function() {
            fillZip( $(this));
        });
function getDigits(e) {
        return e && 0 != e.length ? e.replace(/\D/g, "") : ""
    }
 fillMonthlyIncome = function(e) {
        for (var a = [], t = 1101; t < 2500; t += 100) a.push({
            k: t + 99,
            v: "$" + t + " - $" + (t + 99)
        });
        for (t = 2501; t < 5e3; t += 500) a.push({
            k: t + 499,
            v: "$" + t + " - $" + (t + 499)
        });
        for (t = 5001; t < 1e4; t += 1e3) a.push({
            k: t + 999,
            v: "$" + t + " - $" + (t + 999)
        });
        a.push({
            k: 10001,
            v: "$10,000+"
        });
        for (var n = 0; n < a.length; n++) {
            var o = a[n];
            e.append('<option value="' + o.k + '">' + o.v + "</option>")
        }
    }
    fillMonthlyIncome($("#MonthlyIncome"))
 var days = ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"],
        months = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"];
    function addDays(e, a) {
        var t = new Date(e);
        return t.setDate(e.getDate() + a), t
    }
    configurePaydate = function(e) {
        var a = jQuery(e).is("input") && jQuery(e).datepicker;
        if (a) a("option", "beforeShowDay", function(e) {
            return !isHolidayDate(e) && jQuery.datepicker.noWeekends(e)
        });
        else {
            var t = jQuery(e);
            t.attr("placeholder");
            t.find("option").length || e.append("<option value></option>");
            for (var n = 1; n <= 40; n++) {
                var o = addDays(new Date, n);
                if (1 != n && 1 != o.getDate() || e.append("<option disabled>" + months[o.getMonth()] + " - " + o.getFullYear() + "</option>"), !isHolidayDate(o)) {
                    var i = o.getDay();
                    0 < i && i < 6 && e.append('<option value="' + (o.getMonth() + 1) + "/" + o.getDate() + "/" + o.getFullYear() + '">' + days[o.getDay()].substr(0, 3) + " " + months[o.getMonth()].substr(0, 3) + "-" + o.getDate() + "-" + o.getFullYear() + "</option>")
                }
            }
        }
    };
    var holidayDates = ["01/01/2018", "01/15/2018", "05/28/2018", "07/04/2018", "09/03/2018", "11/12/2018", "11/22/2018", "12/25/2018"],
        isHolidayDate = function(e) {
            for (var a = 0; a < holidayDates.length; a++) {
                var t = holidayDates[a].split("/");
                if (parseInt(t[0]) === e.getMonth() + 1 && parseInt(t[1]) === e.getDate() && parseInt(t[2]) === e.getFullYear()) return !0
            }
            return !1
        };
        
 configurePaydate($("#PayDate1"));
 configurePaydate($("#PayDate2"));
fillRequestedAmount = function(e) {
        var a = [{
            k: 100,
            v: "$100"
        }, {
            k: 200,
            v: "$200"
        }, {
            k: 300,
            v: "$300"
        }, {
            k: 400,
            v: "$400"
        }, {
            k: 500,
            v: "$500"
        }, {
            k: 600,
            v: "$600"
        }, {
            k: 700,
            v: "$700"
        }, {
            k: 800,
            v: "$800"
        }, {
            k: 900,
            v: "$900"
        }, {
             k: 1e3,
            v: "$1000"
        }, {
            k: 1e3,
            v: "$1500"
        }, {
            k: 1e3,
            v: "$2000"
        }, {
            k: 1e3,
            v: "$3000"
        }, {
            k: 1e3,
            v: "$4000"
        }, {
            k: 1e3,
            v: "$5000"
        }];
        e.find('option:not([value=""])').remove();
        for (var t = 0; t < a.length; t++) {
            var n = a[t];
            e.append('<option value="' + n.k + '">' + n.v + "</option>")
        }
};
fillRequestedAmount($('#RequestedAmount'));
